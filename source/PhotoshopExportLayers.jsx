var selected_list;var doc;var modevar mode_all_visible = 0var mode_selected = 1/*    getting the current document.    and looking for selected layers.*/function init(){	doc = app.activeDocument;	if (!doc)    {		alert("No document found!");		return;	}    try    {        doc.path    }    catch(err)    {        alert("This document isn't saved");        return    }    mode = prompt("What would you like to export?\n(0) All visible layers | (1) Only selected",0);    selected_list = [];        switch( parseFloat(mode) )    {                case mode_all_visible:            inspectLayers( doc.layers);        break;                case mode_selected:            // just selected. it works for groups and single layer.            if(doc.activeLayer .typename=="ArtLayer")            {                addLayerToList (doc.activeLayer );            }            else            {                inspectLayers( doc.activeLayer.layers);            }        break;    }    if (selected_list.length>0)    {        exportList( );    }    else    {        alert("Nothing to export!");    }}/*    inpect layers looking for selected layers to export    @param scope Layers object.*/function inspectLayers( scope ){    var count = scope.length;    while(count--)    {        var layer = scope[count];        if (!layer)        {            // avoiding empty set.            return        }        if(layer.typename == "ArtLayer")        {            addLayerToList(layer)        }        else if (layer.typename == "LayerSet")        {            // inspecting LayerSets            inspectLayers( layer.layers )        }     }}/*    add a new layer to the export list.    @param layer*/function addLayerToList(layer){    //checking if the layer is visible and has content (empty layers wont be exported)    if (layer!=null && layer.visible && layer.bounds[2]+layer.bounds[3]>0)    {        selected_list.push( layer );    }}/*    export selected_list */function exportList(){    var layer;    var count = selected_list.length;    while(count--)    {        try        {            // getting a layer from the list and copying its content.            layer = selected_list[count];            layer.copy()        }        catch(err)        {            alert(err)            return        }        // bounds[x,y,width,height]        var w = layer.bounds[2]-layer.bounds[0];        var h = layer.bounds[3]-layer.bounds[1];        var mode = NewDocumentMode[app.activeDocument.mode.toString().split(".")[1]]        // create a new file following the current doc options.        var layer_file = app.documents.add( w, h, doc.resoluition, layer.name, mode, DocumentFill.TRANSPARENT, doc.pixelAspectRatio);        layer_file.paste();                // all layers will be placed into a new directory called "<psd_name>-layers/"        var folder = new Folder(doc.path+"/"+doc.name+"-layers");        if(!folder.exists)        {            folder.create();        }        // figuring out where is the x and y considering that photoshop's register point is by default centered.        var x = Math.round(parseFloat(layer.bounds[0]));        var y = Math.round(parseFloat(layer.bounds[1]));        // creating file.        var file = new File(folder.path+"/"+folder.name+"/"+layer.name+"_"+x+"x"+y+".png");        if(file.created) file.remove();                    // export settings.        var exportOptions = new ExportOptionsSaveForWeb();        exportOptions.quality = 100;        exportOptions.PNG8 = false;        exportOptions.format = SaveDocumentType.PNG;        // exporting png and closing file.        layer_file.exportDocument(file, ExportType.SAVEFORWEB, exportOptions);        layer_file.close(SaveOptions.DONOTSAVECHANGES);    }}init();