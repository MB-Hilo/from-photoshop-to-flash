/*@author igor almeida*/var foo ={	selected_list: [],	doc: null,	mode: -1,	mode_all_visible: 0,	mode_selected: 1,/*	getting the current document.	and looking for selected layers.*/	init: function()	{		this.doc = app.activeDocument;		if (!this.doc)		{			alert("No document found!");			return;		}		try		{			this.doc.path		}		catch(err)		{			alert("This document isn't saved");			return;		}		this.mode = parseFloat(prompt("What would you like to export?\n(0) All visible layers | (1) Only selected", 0));		this.selected_list = [];		switch (this.mode)		{			case this.mode_all_visible:				this.inspectLayers(this.doc.layers);				break;			case this.mode_selected:				// just selected. it works for groups and single layer.				if (this.doc.activeLayer.typename == "ArtLayer")				{					this.addLayerToList(this.doc.activeLayer);				}				else				{					this.inspectLayers(this.doc.activeLayer.layers);				}				break;		}				if (this.selected_list.length > 0)		{			this.exportList();		}		else		{			alert("Nothing to export!");		}	},/*	inpect layers looking for selected layers to export	@param scope Layers object.*/	inspectLayers : function(scope)	{		var count = scope.length;		while (count--)		{			var layer = scope[count];			if (!layer)			{				// avoiding empty set.				return			}			if (layer.typename == "ArtLayer")			{				this.addLayerToList(layer)			}			else if (layer.typename == "LayerSet")			{				// inspecting LayerSets				this.inspectLayers(layer.layers)			}		}	},/*	add a new layer to the export list.	@param layer*/	addLayerToList: function(layer)	{		//checking if the layer is visible and has content (empty layers wont be exported)		if (layer != null)		{			if ( layer.bounds[0] + layer.bounds[1] + layer.bounds[2] + layer.bounds[3] <= 0 )			{				alert("Empty layers will be ignored. Layer name: "+layer.name);				return;			}			if (layer.visible)			{				this.selected_list.push(layer);				}					}	},/*	export selected_list*/	exportList : function()	{		var layer;		var count = 0;		while (count<this.selected_list.length)		{			try			{				// getting a layer from the list and copying its content.				layer = this.selected_list[count];				layer.copy()			}			catch(err)			{				if (this.mode == this.mode_all_visible)				{					alert("Error exporting layer: " + layer.name + "\n" + err + "\n");				}				else if (this.mode == this.mode_selected)				{					alert("You can't select more than 1 layer. But if you want so, please put it in a group and then select the group.")				}				return			}			// bounds model [x,y,width,height]			var w = layer.bounds[2] - layer.bounds[0];			var h = layer.bounds[3] - layer.bounds[1];			var mode = NewDocumentMode[app.activeDocument.mode.toString().split(".")[1]];			// create a new file following the current doc options.			var layer_file = app.documents.add(w, h, this.doc.resoluition, layer.name, mode, DocumentFill.TRANSPARENT, this.doc.pixelAspectRatio);			layer_file.paste();			// all layers will be placed into a new directory called "<psd_name>-layers/"			var folder = new Folder(this.doc.path + "/" + this.doc.name + "-layers");			if (!folder.exists) folder.create();					// figuring out where is the x and y considering that photoshop's register point is by default centered.			var x = Math.round(parseFloat(layer.bounds[0]));			var y = Math.round(parseFloat(layer.bounds[1]));			// creating file.			var file = new File(folder.path + "/" + folder.name + "/" + count + "-" + layer.name + "_" + x + "x" + y + ".png");			if (file.created) file.remove();			// export settings.			var exportOptions = new ExportOptionsSaveForWeb();			exportOptions.quality = 100;			exportOptions.PNG8 = false;			exportOptions.format = SaveDocumentType.PNG;			// exporting png and closing file.			layer_file.exportDocument(file, ExportType.SAVEFORWEB, exportOptions);			layer_file.close(SaveOptions.DONOTSAVECHANGES);			count++;		}	}}foo.init();